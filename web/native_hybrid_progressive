

## Native App

> Android 또는 iOS 같은 어떤 구체적인 플랫폼만을 위해 만들어진 앱


**장점**

- 사용자에게 가장 빠르고 안정적인 환경 제공
- 기기의 네이티브 기능을 활용하여 개발하기 좋다. (GPS, 마이크 등)

**Android 또는 IOS만을 위한**

- `Android`는 코틀린 또는 자바 기반, `IOS`의 경우는 스위프트 또는 Object C 기반

**크로스 플랫폼**

- 구글의 `Flutter` 또는 Facebook의 `React native`

**언제 씀**

- 복잡한 기능을 가진 앱임에도 성능이 보장되어야 할 때
- 기기의 특별한 기능을 사용하고자 하는 앱, 하드웨어 쪽 기능을 필요로 하는 앱일 때

<br>

## Hybrid App

> 네이티브 앱과 웹 앱의 기능을 결합한 것으로 `HTML`, `CSS`, `Javascript` 및 이를 사용하는 프레임워크로 개발 해 다양한 플랫폼에서 동작

**장점**

- 하나의 어플리케이션을 빌드해 두 플랫폼에서 모두 작동시킬 수 있어 시간과 비용이 절약됨

**단점**

- 특정 OS나 앱에 특화된 것이 아니라 성능 이슈가 있음
- 네트워크 환경이나 웹사이트 용량에 성능이 영향을 받는다.
- 웹 기반 코드를 사용하기 때문에 안드로이드 또는 아이폰에서 특정 기능이 동작하지 않거나 의도치 않게 동작할 수 있음

**언제씀**

- 다양한 플랫폼에서의 수요가 있어 한번에 이를 지원해야 할 때
- 매우 간단한 어플리케이션일 때

<br>

## Progressive Web App

> 모바일 사이트에서 네이티브 앱과 같은 사용자 경험을 제공하는 기술

모바일 기기에서 웹 사이트를 볼 때 네이티브 앱 처럼 동작하는 것을 가능하게 한다.

설치 없이 홈 화면에 바로가기를 추가해 앱 처럼 사용할 수 있다.

**장점*

- service worker를 사용해 오프라인이나 느린 네트워크에서 작동시킬 수 있다.
- 모바일 기기에서 따로 스토어에 들어가 설치하거나 하는 과정이 없다.
- 푸시 알림, 블루투스 연결 등 일부 모바일 환경에서의 기능을 사용할 수 있다.
- 플랫폼별로 개발할 필요 없이 웹 기술로 개발할 수 있다.
- HTTPS 적용을 통해 제공되어 안전성 보장

**단점**

- 일부 오래된 브라우저들에서 지원하지 않을 수 있다.
- 네이티브 앱의 성능을 따라갈 수는 없다.
- IOS에서 기기의 일부 기능을 사용할 수 없을 수 있다.
- 사용자 접근성에 대한 인식 부재 (앱을 사용한다 === 스토어에서 검색해 다운받는다)


### 참고해볼 Reference

- [ref](https://yceffort.kr/2020/11/pwa-pros-and-cons)
- [ref](https://velog.io/@openhub/%EB%84%A4%EC%9D%B4%ED%8B%B0%EB%B8%8C-%EC%95%B1Native-App-vs-%ED%95%98%EC%9D%B4%EB%B8%8C%EB%A6%AC%EB%93%9C-%EC%95%B1Hybrid-App-vs-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%A0%88%EC%8B%9C%EB%B8%8C-%EC%9B%B9-%EC%95%B1PWA-%EC%A0%95%EC%9D%98%EC%99%80-%EC%9E%A5%EB%8B%A8%EC%A0%90)
